import React, { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";
import ReactApexChart from "react-apexcharts";
import upp from "../Images/upwardb.png";
import downn from "../Images/downwardb.png";
import axios from "axios";
import toast from "react-hot-toast";
import grc1 from "../Images/greece.jpg";
//import { toast } from "react-toastify";

function CryptoData() {
  const { id } = useParams();
  const [cryptoData, setCryptoData] = useState(null);
  const [chartData, setChartData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [hovered, setHovered] = useState(false);
  const [isAdded, setIsAdded] = useState(false);
  const [activeTab, setActiveTab] = useState("description");
  const [timeRange, setTimeRange] = useState("1Y");
  const [exchangeData, setExchangeData] = useState(null);  // New state to store exchange data

  const handleTabClick = (tab) => {
    setActiveTab(tab);
  };

  const handleCartClick = async () => {
    const username = sessionStorage.getItem("username");
    const payload = {
      username: username,
      stockId: cryptoData.id, // Replace with the actual stock ID
    };

    try {
      // Fetch the user's existing watchlist
      const watchlistResponse = await axios.get(
        `http://localhost:7060/watchlist/get-watchlist-by-username/${username}`,
        {
          headers: {
            Authorization: `Bearer ${sessionStorage.getItem("token")}`,
          },
        }
      );

      const watchlist = watchlistResponse.data;

      // Check if the stock is already in the watchlist
      const isStockInWatchlist = watchlist.some(
        (item) => item.stockId === cryptoData.id
      );

      if (isStockInWatchlist) {
        toast.error("This stock is already in your watchlist");
        console.log("Stock is already in the watchlist:", cryptoData.id);
        return; // Exit the function
      }

      // Stock is not in the watchlist, proceed to add it
      const response = await axios.post(
        `http://localhost:7060/watchlist/save`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${sessionStorage.getItem("token")}`,
          },
        }
      );

      setIsAdded(true); // Update the state
      toast.success("Added to watchlist");
      console.log("Response from server:", response.data);
    } catch (error) {
      // Handle errors
      console.error("Error handling watchlist:", error);
      toast.error("An error occurred while updating the watchlist");
    }
  };

  const handleTimeRangeClick = async (range) => {
    setTimeRange(range);
    await fetchChartData(range);
  };

  const fetchChartData = async (range) => {
    try {
      const chartResponse = await fetch(
        `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=usd&days=365`
      );
      const chartData = await chartResponse.json();
      const transformedChartData = chartData.prices.map(
        ([timestamp, price]) => ({
          x: new Date(timestamp).toISOString(),
          y: price,
        })
      );
      setChartData(transformedChartData);
    } catch (error) {
      console.error("Error fetching chart data:", error);
    }
  };

  const fetchExchangeData = async () => {
    try {
      const response = await fetch(
        "https://api.coingecko.com/api/v3/exchanges",
        {
          headers: {
            accept: "application/json",
            "x-cg-demo-api-key": "CG-y1GGhURGBtELwoPE88Xk7Vvc",
          },
        }
      );
      const data = await response.json();
      setExchangeData(data); // Store exchange data
    } catch (error) {
      console.error("Error fetching exchange data:", error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch cryptocurrency details
        const response = await fetch(
          `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${id}`
        );
        const data = await response.json();
        setCryptoData(data[0]);

        // Fetch initial chart data
        await fetchChartData(timeRange);
        const watchlistResponse = await axios.get(
          `http://localhost:7060/watchlist/get-watchlist-by-username/${username}`,
          {
            headers: {
              Authorization: `Bearer ${sessionStorage.getItem("token")}`,
            },
          }
        );
        const watchlist = watchlistResponse.data;

        // Check if the current stockId is in the watchlist
        const isStockInWatchlist = watchlist.some(
          (item) => item.stockId === id
        );

        // Set isAdded state if stock is in the watchlist
        setIsAdded(isStockInWatchlist);

        setLoading(false);
      } catch (error) {
        console.error("Error fetching data:", error);
        setLoading(false);
      }
    };

    fetchData();
    fetchExchangeData();  // Fetch exchange data when the component mounts
  }, [id, timeRange]);

  if (loading) return <div>Loading...</div>;
  if (!cryptoData) return <div>Data not available</div>;

  const chartOptions = {
    chart: {
      height: "100%",
      maxWidth: "100%",
      type: "area",
      fontFamily: "Inter, sans-serif",
      toolbar: { show: false },
      background: "#ffffff",
    },
    tooltip: {
      enabled: true,
      x: {
        format: "dd MMM yyyy, HH:mm", // Show hours:minutes for "1D", otherwise show full date
      },
      theme: "dark",
    },
    fill: {
      type: "gradient",
      gradient: {
        opacityFrom: 0.55,
        opacityTo: 0,
        shade: "#1C64F2",
        gradientToColors: ["#1C64F2"],
      },
    },
    dataLabels: { enabled: false },
    stroke: { width: 2 },
    grid: { show: false, strokeDashArray: 4 },
    series: [
      {
        name: `${cryptoData.name} Price (USD)`,
        data: chartData,
        color: "#1A56DB",
      },
    ],
    xaxis: {
      type: "datetime",
      labels: { show: true, style: { colors: "#000000" } },
    },
    yaxis: {
      labels: {
        formatter: (value) => `$${value.toFixed(2)}`,
        style: { colors: "#000000" },
      },
    },
  };

  return (
    <div className="flex flex-col m-3 space-y-5 bg-white">
      <div className="flex space-x-5">
        {/* Left Card Section */}
        <div className="relative w-full sm:w-[50%] md:w-[30%] flex flex-col overflow-hidden rounded-lg border border-gray-100 bg-white shadow-md">
          <div className="relative mx-3 mt-3 ">
            <div className="absolute top-0 left-0 m-2 rounded-full bg-black px-2 text-center text-xs font-medium text-white">
              Last Updated:{" "}
              {new Date(cryptoData.last_updated).toLocaleDateString("en-US", {
                month: "short",
                day: "numeric",
                year: "numeric",
              })}{" "}
              {new Date(cryptoData.last_updated)
                .toLocaleTimeString("en-US", {
                  hour: "numeric",
                  minute: "2-digit",
                })
                .toLowerCase()}
            </div>
            <Link className="flex h-32 overflow-hidden rounded-xl mt-10" to="#">
              <img
                src={cryptoData.image}
                alt={cryptoData.name}
                className={`w-24 h-24 mx-auto mb-4 rounded-full transform transition-all ${
                  hovered ? "scale-125" : "scale-100"
                }`}
              />
            </Link>
          </div>

          <div className="mt-4 px-5 pb-5">
            <a href="#">
              <h5 className="text-xl font-bold tracking-tight text-slate-900">
                <span className="text-[30px]">{cryptoData.name}</span> (
                {cryptoData.symbol.toUpperCase()}){" "}
                <span className="text-black border-black bg-white ">
                  #{cryptoData.market_cap_rank}
                </span>
              </h5>
            </a>
            <div className="mt-2 mb-5 flex items-center justify-between">
              <p className="flex justify-between w-full">
                <span className="text-[30px] font-bold text-black">
                  ${cryptoData.current_price.toFixed(2)}
                </span>
                <span
                  className={`flex items-center ${
                    cryptoData.price_change_percentage_24h >= 0
                      ? "text-green-500"
                      : "text-red-500"
                  }`}
                >
                  <img
                    src={
                      cryptoData.price_change_percentage_24h >= 0 ? upp : downn
                    }
                    alt="up/down arrow"
                    className="h-5 w-5"
                  />
                  <span className="text-xl ml-1 font-medium">
                    {cryptoData.price_change_percentage_24h.toFixed(2)}%
                  </span>
                </span>
              </p>
            </div>

            <button
              onClick={handleCartClick}
              className={`${
                isAdded
                  ? "bg-green-500 text-white"
                  : "bg-blue-500 text-white"
              } w-full py-2 px-4 rounded-md`}
            >
              {isAdded ? "Added to Watchlist" : "Add to Watchlist"}
            </button>
          </div>
        </div>

        {/* Right Card Section */}
        <div className="relative flex w-full md:w-[60%] flex-col space-y-5 overflow-hidden rounded-lg border border-gray-100 bg-white shadow-md">
          <div className="flex justify-center mt-10 mb-5">
            <ReactApexChart
              options={chartOptions}
              series={chartOptions.series}
              type="area"
              height="400"
            />
          </div>
          <div className="flex justify-between p-4 border-t border-b">
            <div className="flex items-center space-x-5">
              {["1D", "1W", "1M", "3M", "1Y"].map((range) => (
                <button
                  key={range}
                  onClick={() => handleTimeRangeClick(range)}
                  className={`text-md px-3 py-1 rounded-full ${
                    timeRange === range
                      ? "bg-blue-500 text-white"
                      : "text-blue-500 border border-blue-500"
                  }`}
                >
                  {range}
                </button>
              ))}
            </div>
          </div>
          
          <div className="flex items-center justify-center space-x-5 mt-10">
            <button
              onClick={() => handleTabClick("description")}
              className={`${
                activeTab === "description"
                  ? "border-b-4 border-blue-500"
                  : "text-gray-600"
              } text-lg`}
            >
              Description
            </button>
            <button
              onClick={() => handleTabClick("exchanges")}
              className={`${
                activeTab === "exchanges"
                  ? "border-b-4 border-blue-500"
                  : "text-gray-600"
              } text-lg`}
            >
              Exchanges
            </button>
          </div>
          <div className="p-4">
            {activeTab === "description" ? (
              <div className="text-gray-800">{cryptoData.description.en}</div>
            ) : (
              <div className="text-gray-800">
                <h3 className="text-xl font-semibold">Exchanges</h3>
                {exchangeData ? (
                  <ul>
                    {exchangeData.map((exchange) => (
                      <li key={exchange.id} className="mt-2">
                        <a
                          href={exchange.url}
                          className="text-blue-600"
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          {exchange.name}
                        </a>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p>Loading exchanges...</p>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default CryptoData;
